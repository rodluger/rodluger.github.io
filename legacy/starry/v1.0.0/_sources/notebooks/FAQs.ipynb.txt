{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FAQs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A non-exhaustive list of frequently asked questions about `starry`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. I get weird output when I call `starry` functions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you call a `starry.Map` method (or any other `starry` function) and get something like\n",
    "\n",
    "```python\n",
    "Elemwise{mul,no_inplace}.0\n",
    "```\n",
    "\n",
    "or\n",
    "\n",
    "```python\n",
    "TensorConstant{(1,) of 1.0}\n",
    "```\n",
    "\n",
    "or\n",
    "\n",
    "```python\n",
    "Subtensor{int64}.0\n",
    "```\n",
    "\n",
    "that's because you're running `starry` in [lazy mode](LazyGreedy.ipynb#Lazy-mode). To obtain the numerical value of a variable or expression in lazy mode, simply call its ``.eval()`` method. Or, alternatively, switch to [greedy mode](LazyGreedy.ipynb#Greedy-mode) by adding\n",
    "\n",
    "```python\n",
    "starry.config.lazy = False\n",
    "```\n",
    "\n",
    "at the very **top** of your script, before instantiating any ``starry`` objects. All methods will automagically return numerical values in greedy mode."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. I get a `ValueError` when instantiating a `pymc3` model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you get an error like\n",
    "\n",
    "```python\n",
    "ValueError: setting an array element with a sequence.\n",
    "```\n",
    "\n",
    "inside of a `pymc3` model, it could be that you're in [greedy mode](LazyGreedy.ipynb#Greedy-mode). If you have the line\n",
    "\n",
    "```python\n",
    "starry.config.lazy = False\n",
    "```\n",
    "\n",
    "at the top of your script, simply remove it. To sample using `pymc3`, `starry` needs to be in [lazy mode](LazyGreedy.ipynb#Lazy-mode)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. How do I evaluate a variable inside a `pymc3` model?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you're in a `pymc3` model context, running the `.eval()` method of a `pymc3` variable usually results in an error similar to the following:\n",
    "\n",
    "```python\n",
    "MissingInputError: Input 0 of the graph (indices start from 0), used to compute [something], was not provided and not given a value. Use the Theano flag exception_verbosity='high', for more information on this error.\n",
    "```\n",
    "\n",
    "That's because in a `pymc3` model context, none of the `theano` variables ever have values (\"inputs\"), so you get an error when you try to evaluate them the usual way. `pymc3` stores things differently (using test values), so what you want to do instead is\n",
    "\n",
    "```python\n",
    "exoplanet.eval_in_model(expression)\n",
    "```\n",
    "\n",
    "where `expression` is the `pymc3` expression whose value you want. By default, this will evaluate the expression at the **test point** of each of the inputs. If you've already run the sampler and have access to a `trace`, you can evaluate the expression at index `i` of the `trace` by running\n",
    "\n",
    "```python\n",
    "exoplanet.eval_in_model(expression, point=trace.point(i))\n",
    "```\n",
    "\n",
    "Check out the [exoplanet docs](https://exoplanet.dfm.io/en/stable/user/api/#exoplanet.eval_in_model) for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. I can't find what I'm looking for."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Please search [all of the issues on GitHub](https://github.com/rodluger/starry/issues?utf8=%E2%9C%93&q=), or [open a new one](https://github.com/rodluger/starry/issues/new)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
