{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Downward recursion relations for $\\mathcal{I}_v$ and $\\mathcal{J}_v$\n",
    "\n",
    "#### Validation of the analytical solution to the integrals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's import some stuff:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy.integrate import quad\n",
    "import matplotlib.pyplot as pl\n",
    "from mpmath import ellipe, ellipk, fac2\n",
    "from sympy import factorial\n",
    "%matplotlib inline\n",
    "epsabs=1e-12\n",
    "epsrel=1e-12"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's define the numerical form of the integrals:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def I(v, k):\n",
    "    \"\"\"Return the integral I, evaluated numerically.\"\"\"\n",
    "    kappa = 2 * np.arcsin(k)\n",
    "    func = lambda x: np.sin(x) ** (2 * v)\n",
    "    res, err = quad(func, -0.5 * kappa, 0.5 * kappa, epsabs=epsabs, epsrel=epsrel)\n",
    "    return res\n",
    "\n",
    "def J(v, k):\n",
    "    \"\"\"Return the integral J, evaluated numerically.\"\"\"\n",
    "    kappa = 2 * np.arcsin(k)\n",
    "    func = lambda x: np.sin(x) ** (2 * v) * (1 - k ** (-2) * np.sin(x) ** 2) ** 1.5\n",
    "    res, err = quad(func, -0.5 * kappa, 0.5 * kappa, epsabs=epsabs, epsrel=epsrel)\n",
    "    return res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's also define our analytical recursion relations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ISeries(v, k, nterms=30):\n",
    "    \"\"\"Return the integral I, evaluated as a series.\"\"\"\n",
    "    res = 0\n",
    "    for j in range(nterms):\n",
    "        res += fac2(2 * j - 1) / (2 ** j * factorial(j) * (2 * j + 2 * v + 1)) * k ** (2 * j)\n",
    "    return 2 * k ** (1 + 2 * v) * float(res)\n",
    "\n",
    "def JSeries(v, k, nterms=30):\n",
    "    \"\"\"Return the integral J, evaluated as a series.\"\"\"\n",
    "    res = 0\n",
    "    for j in range(nterms):\n",
    "        res += fac2(2 * j - 1) * fac2(2 * j + 2 * v - 1) / \\\n",
    "               (2 ** (2 * j + v) * factorial(j) * factorial(j + v + 2)) * k ** (2 * j)\n",
    "    return 3 * np.pi / 4 * k ** (1 + 2 * v) * float(res)\n",
    "\n",
    "def IDownward(v, k, vmax=10, nterms=30):\n",
    "    \"\"\"Return the integral I, evaluated recursively.\"\"\"\n",
    "    if v == vmax:\n",
    "        return ISeries(v, k, nterms)\n",
    "    else:\n",
    "        return (2 / (2 * v + 1)) * ((v + 1) * IDownward(v + 1, k, vmax, nterms) + k ** (2 * v + 1) * np.sqrt(1 - k ** 2))\n",
    "\n",
    "def JDownward(v, k, vmax=10, nterms=30):\n",
    "    \"\"\"Return the integral J, evaluated recursively.\"\"\"\n",
    "    if (v == vmax) or (v == vmax - 1):\n",
    "        return JSeries(v, k, nterms)\n",
    "    else:\n",
    "        return 1 / ((2 * v + 1) * k ** 2) * (2 * (3 + v + (1 + v) * k ** 2) * JDownward(v + 1, k, vmax, nterms) -\n",
    "                                             (2 * v + 7) * JDownward(v + 2, k, vmax, nterms))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's show that the error is close to the machine limit for $k < \\frac{1}{2}$ and $v < 10$. (Recall from the text that these expressions are very slow to converge for $k > \\frac{1}{2}$, in which case we perform upward recursion instead.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The maximum relative error on I is 1.1102e-16.\n",
      "The maximum fractional error on I is 2.6404e-15.\n"
     ]
    }
   ],
   "source": [
    "maxrel = 0\n",
    "maxfrac = 0\n",
    "for k in np.logspace(-5, np.log10(0.5), 100):\n",
    "    for v in range(10):\n",
    "        I1 = I(v, k)\n",
    "        I2 = IDownward(v, k)\n",
    "        rel = np.abs(I1 - I2)\n",
    "        frac = np.abs(rel / I1)\n",
    "        if rel > maxrel:\n",
    "            maxrel = rel\n",
    "        if frac > maxfrac:\n",
    "            maxfrac = frac\n",
    "print(\"The maximum relative error on I is %.4e.\" % maxrel)\n",
    "print(\"The maximum fractional error on I is %.4e.\" % maxfrac)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The maximum relative error on J is 7.0499e-15.\n",
      "The maximum fractional error on J is 1.0977e-05.\n"
     ]
    }
   ],
   "source": [
    "maxrel = 0\n",
    "maxfrac = 0\n",
    "for k in np.logspace(-5, np.log10(0.5), 100):\n",
    "    for v in range(10):\n",
    "        J1 = J(v, k)\n",
    "        J2 = JDownward(v, k)\n",
    "        rel = np.abs(J1 - J2)\n",
    "        frac = np.abs(rel / J1)\n",
    "        if rel > maxrel:\n",
    "            maxrel = rel\n",
    "        if frac > maxfrac:\n",
    "            maxfrac = frac\n",
    "print(\"The maximum relative error on J is %.4e.\" % maxrel)\n",
    "print(\"The maximum fractional error on J is %.4e.\" % maxfrac)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Woot. Note that as before, the fractional error on $\\mathcal{J}_v$ is rather large (but still only about 10 ppm) because the magnitude of the value of $\\mathcal{J}_v$ can become very small for certain values of $k$ and $v$, in which case the numerical integral is not very accurate!\n",
    "â– "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
