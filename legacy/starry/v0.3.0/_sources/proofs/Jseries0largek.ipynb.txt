{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Upward recursion relations for $\\mathcal{J}_v$ for $k^2 > 1$\n",
    "\n",
    "#### Validation of the analytical solution to the integral"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's import some stuff:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy.integrate import quad\n",
    "import matplotlib.pyplot as pl\n",
    "from mpmath import ellipe, ellipk\n",
    "from sympy import factorial\n",
    "%matplotlib inline\n",
    "epsabs=1e-12\n",
    "epsrel=1e-12"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's define the numerical form of the integral:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def J(v, k):\n",
    "    \"\"\"Return the integral J, evaluated numerically.\"\"\"\n",
    "    kappa = np.pi\n",
    "    func = lambda x: np.sin(x) ** (2 * v) * (1 - k ** (-2) * np.sin(x) ** 2) ** 1.5\n",
    "    res, err = quad(func, -0.5 * kappa, 0.5 * kappa, epsabs=epsabs, epsrel=epsrel)\n",
    "    return res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's also define our analytical recursion relations, as well as the initial values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def JUpward(v, k, nterms=30):\n",
    "    \"\"\"Return the integral J, evaluated recursively.\"\"\"\n",
    "    if v == 0:\n",
    "        return (1 / 3) * ((8 - 4 / k ** 2) * ellipe(1 / k ** 2) -\n",
    "                          2 * (1 - 1 / k ** 2) * ellipk(1 / k ** 2))\n",
    "    elif v == 1:\n",
    "        return (1 / 15) * ((-6 * k ** 2 + 26 - 16 / k ** 2) * ellipe(1 / k ** 2) +\n",
    "                          2 * (1 - 1 / k ** 2) * (3 * k ** 2 - 4) * ellipk(1 / k ** 2))\n",
    "    else:\n",
    "        return (1 / (2 * v + 3)) * (2 * (v + (v - 1) * k ** 2 + 1) * JUpward(v - 1, k, nterms=nterms) -\n",
    "                                    k ** 2 * (2 * v - 3) * JUpward(v - 2, k, nterms=nterms))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's show that the error is close to the machine limit for $1 < k < 2$ and $v < 10$. (Recall from the text that these expressions are numerically unstable for $k > 2$, in which case we perform downward recursion instead.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The maximum relative error on J is 7.3636e-13.\n",
      "The maximum fractional error on J is 1.9352e-12.\n"
     ]
    }
   ],
   "source": [
    "maxrel = 0\n",
    "maxfrac = 0\n",
    "for k in np.linspace(1.0, 2.0, 100):\n",
    "    for v in range(10):\n",
    "        J1 = J(v, k)\n",
    "        J2 = JUpward(v, k)\n",
    "        rel = np.abs(J1 - J2)\n",
    "        frac = np.abs(rel / J1)\n",
    "        if rel > maxrel:\n",
    "            maxrel = rel\n",
    "        if frac > maxfrac:\n",
    "            maxfrac = frac\n",
    "print(\"The maximum relative error on J is %.4e.\" % maxrel)\n",
    "print(\"The maximum fractional error on J is %.4e.\" % maxfrac)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "â– "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
