{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Rotation matrix for spherical harmonics\n",
    "\n",
    "#### Code to compute and validate the rotation matrix for spherical harmonics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We begin by importing some stuff and defining our functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Using sympy version 1.1.2.dev\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from IPython.display import display, Math\n",
    "import sympy\n",
    "from sympy import *\n",
    "from sympy.functions.special.tensor_functions import KroneckerDelta\n",
    "import starry\n",
    "import matplotlib\n",
    "%matplotlib inline\n",
    "\n",
    "# Initialize the session\n",
    "init_session(quiet=True)\n",
    "\n",
    "# I am using the dev version of sympy\n",
    "print(\"Using sympy version\", sympy.__version__)\n",
    "\n",
    "# Define our symbols\n",
    "l, m, n, alpha, beta, gamma, u1, u2, u3, theta = symbols('l m n alpha beta gamma u1 u2 u3 theta')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Dmn(l, m, n, alpha, beta, gamma):\n",
    "    \"\"\"Compute the (m, n) term of the Wigner D matrix.\"\"\"\n",
    "    sumterm = 0\n",
    "    # Expression diverges when beta = 0\n",
    "    if beta == 0:\n",
    "        beta = 1e-16\n",
    "    for k in range(l + m + 1):\n",
    "        sumterm += (-1) ** k * cos(beta / 2) ** (2 * l + m - n - 2 * k) * \\\n",
    "                   sin(beta / 2) ** (-m + n + 2 * k) / \\\n",
    "                   (factorial(k) * factorial(l + m - k) * factorial(l - n - k) * factorial(n - m + k))\n",
    "    return sumterm * exp(-I * (alpha * n + gamma * m)) * (-1) ** (n + m) * \\\n",
    "           sqrt(factorial(l - m) * factorial(l + m) * factorial(l - n) * factorial(l + n))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}1.0 e^{- i \\left(- \\alpha - \\gamma\\right)} \\cos^{2}{\\left (\\frac{\\beta}{2} \\right )} & - 1.0 \\sqrt{2} e^{i \\gamma} \\sin{\\left (\\frac{\\beta}{2} \\right )} \\cos{\\left (\\frac{\\beta}{2} \\right )} & e^{- i \\left(\\alpha - \\gamma\\right)} \\sin^{2}{\\left (\\frac{\\beta}{2} \\right )}\\\\1.0 \\sqrt{2} e^{i \\alpha} \\sin{\\left (\\frac{\\beta}{2} \\right )} \\cos{\\left (\\frac{\\beta}{2} \\right )} & - \\sin^{2}{\\left (\\frac{\\beta}{2} \\right )} + \\cos^{2}{\\left (\\frac{\\beta}{2} \\right )} & - \\sqrt{2} e^{- i \\alpha} \\sin{\\left (\\frac{\\beta}{2} \\right )} \\cos{\\left (\\frac{\\beta}{2} \\right )}\\\\e^{- i \\left(- \\alpha + \\gamma\\right)} \\sin^{2}{\\left (\\frac{\\beta}{2} \\right )} & \\sqrt{2} e^{- i \\gamma} \\sin{\\left (\\frac{\\beta}{2} \\right )} \\cos{\\left (\\frac{\\beta}{2} \\right )} & e^{- i \\left(\\alpha + \\gamma\\right)} \\cos^{2}{\\left (\\frac{\\beta}{2} \\right )}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡     -ⅈ⋅(-α - γ)    2⎛β⎞            ⅈ⋅γ    ⎛β⎞    ⎛β⎞     -ⅈ⋅(α - γ)    2⎛β⎞ \n",
       "⎢1.0⋅ℯ           ⋅cos ⎜─⎟   -1.0⋅√2⋅ℯ   ⋅sin⎜─⎟⋅cos⎜─⎟    ℯ          ⋅sin ⎜─⎟ \n",
       "⎢                     ⎝2⎠                   ⎝2⎠    ⎝2⎠                    ⎝2⎠ \n",
       "⎢                                                                             \n",
       "⎢        ⅈ⋅α    ⎛β⎞    ⎛β⎞          2⎛β⎞      2⎛β⎞           -ⅈ⋅α    ⎛β⎞    ⎛β\n",
       "⎢1.0⋅√2⋅ℯ   ⋅sin⎜─⎟⋅cos⎜─⎟     - sin ⎜─⎟ + cos ⎜─⎟      -√2⋅ℯ    ⋅sin⎜─⎟⋅cos⎜─\n",
       "⎢               ⎝2⎠    ⎝2⎠           ⎝2⎠       ⎝2⎠                   ⎝2⎠    ⎝2\n",
       "⎢                                                                             \n",
       "⎢   -ⅈ⋅(-α + γ)    2⎛β⎞           -ⅈ⋅γ    ⎛β⎞    ⎛β⎞       -ⅈ⋅(α + γ)    2⎛β⎞ \n",
       "⎢  ℯ           ⋅sin ⎜─⎟       √2⋅ℯ    ⋅sin⎜─⎟⋅cos⎜─⎟      ℯ          ⋅cos ⎜─⎟ \n",
       "⎣                   ⎝2⎠                   ⎝2⎠    ⎝2⎠                      ⎝2⎠ \n",
       "\n",
       " ⎤\n",
       " ⎥\n",
       " ⎥\n",
       " ⎥\n",
       "⎞⎥\n",
       "⎟⎥\n",
       "⎠⎥\n",
       " ⎥\n",
       " ⎥\n",
       " ⎥\n",
       " ⎦"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def D(l, alpha, beta, gamma):\n",
    "    \"\"\"Compute the Wigner D matrix.\"\"\"\n",
    "    res = zeros(2 * l + 1, 2 * l + 1)\n",
    "    for m in range(-l, l + 1):\n",
    "        for n in range(-l, l + 1):\n",
    "            res[m + l, n + l] = Dmn(l, m, n, alpha, beta, gamma)\n",
    "    return res\n",
    "\n",
    "# Print it for l = 1\n",
    "D(1, alpha, beta, gamma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Umn(l, m, n):\n",
    "    \"\"\"Compute the (m, n) term of the transformation matrix from complex to real Ylms.\"\"\"\n",
    "    if n < 0:\n",
    "        term1 = I\n",
    "    elif n == 0:\n",
    "        term1 = sqrt(2) / 2\n",
    "    else:\n",
    "        term1 = 1\n",
    "    if (m > 0) and (n < 0) and (n % 2 == 0):\n",
    "        term2 = -1\n",
    "    elif (m > 0) and (n > 0) and (n % 2 != 0):\n",
    "        term2 = -1\n",
    "    else:\n",
    "        term2 = 1\n",
    "    return term1 * term2 * 1 / sqrt(2) * (KroneckerDelta(m, n) + KroneckerDelta(m, -n))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAJAAAABXCAMAAADcdTyGAAAAP1BMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADFBd4eAAAAFHRSTlMAMquZdlQQQO0wRIm7ZiLN3e98bLtDKU8AAAAJcEhZcwAADsQAAA7EAZUrDhsAAARpSURBVGgF7ZvrkqMgEIXxmlmNMdn1/Z91AcUE6NNNG1OzWzX8GBTh9CcaApyMqRafavPN6b5yGFMtTWtT9808ZnIU9eKAKoqlXYHtX+rqm2VQfIJAw/hmTK45FsdA196Ysbk2NjOmbTh5/bVIPGoOgbrW8tyMqWdXv7JHJ6ZYPBKGQFdb7W4xquVcFh+dEUdA0+SABmNui/1zcuLEEZC7B5+6pTdDe+4YFYmHQFueAt3W0eg5KN3du9RbKpj6ZpxGcuBIm5DiSaUEaBh96H6/h9F+vG59d0+avZ7O9h5697pJiRRPGyVAxsxu+GnCezOtH/er7SaUpoe7MvoPI6oTyknxcHHNM6DBdtEtvDJu/BoqY58YfiRXX9m9anKixJNWGZCZG1Nv/V/NXdfZMaybDR62Fw80LEVfhYS4CDQsQ+igh/82s29I7YZIOvWLf6rDwjzVZ0tC/HnRH+U9ZGbVUHhbfOdVa5ao56eiOAFUFd1riHVbe6gUSBQngEKoslz3yGTNGGifAREHSGt9qTv5pSY0bVEqGwOlV0vOr34QnYo+9gV6GGifCwkq68DYFA2MqxSrDIGecyEByNzdV8cDj5xpe14ZApXPhfrRTs3LeYRZFgb60FxImmVBINfRZV9Q6SMpOcfKLJCbC30mYWUOyM2FPpMYZQZomwt9AIlTxkDbXOgDPKwyBApzofOBeGUIFOZC5wPxyhDofJAyxR8gqZ9gD5Uv/6QQ6XVeGQIVL/9svO5RsgYKYLwyAipf/vV1U2tmZ4KyA7osl0C/55rln2k1QILyb7Clp1r+qYAEZfDIdGsJDZCkDIB0yz8NkKQMgfzUo3D5pwPilQGQ1LH7y+8PNECSMgAyxcs/R6QBkpQRkGr5pwISlBGQavmnAhKUEZBq+acCEpQhUPnyr6kfy1y7fe2yxCtDoDLx82s5oMvXr/OFjyr++YJ+2VHJ99r9k48MOIrv3enR1j89JPXc/9RD0DiWblJzPQuCewgbx5qAQt08CAaKjOOzXenAGQXxhRAoNo5PdqUDTxyEB3Lb4eU7sSGCMieCoB7ijGNlVFydCoKAdtP1E650QIyCbIUpEGkc8650kC/PySA0EGkcC640v5tBYJJBQr20h/SutOF3M0KgKGfc6QyIMo5ZV1rYzYhAwgkVZLuWAaldaWE3IzDEOXancyDCOOZc6W3hV2iTBywiCOwhpSstLY0DQpJDdzrvISMax5G2tJsRVX6ewCAE0LNVyZHSJhclYyDaOF5LgZT4yPr5vqfZGY90kCAfA4VSTa7aJ5GFMRDrHb8IC7sZLzXTQzICBOK94xdtYTfjpWZySEeAQOVzIa1NHrjoCBio2JXmdzNC+DynfwMIgZwA9o5z+WMleQQWCHvHx8LnrfIIHBDjHefSh0qICAwQ5x0fCp81oiJgINY7zrSPFJARIBDvHR+Jn7ahI0Ag3jtOxY+c0xFWIP99F34seET8lDb7Pwn07sf5bRt+bnqK+BER/08CbWv+AmtYRVx9PzdeAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}\\frac{\\sqrt{2} i}{2} & 0 & \\frac{\\sqrt{2}}{2}\\\\0 & 1 & 0\\\\\\frac{\\sqrt{2} i}{2} & 0 & - \\frac{\\sqrt{2}}{2}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡√2⋅ⅈ      √2 ⎤\n",
       "⎢────  0   ── ⎥\n",
       "⎢ 2        2  ⎥\n",
       "⎢             ⎥\n",
       "⎢ 0    1   0  ⎥\n",
       "⎢             ⎥\n",
       "⎢√2⋅ⅈ     -√2 ⎥\n",
       "⎢────  0  ────⎥\n",
       "⎣ 2        2  ⎦"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def U(l):\n",
    "    \"\"\"Compute the U transformation matrix.\"\"\"\n",
    "    res = zeros(2 * l + 1, 2 * l + 1)\n",
    "    for m in range(-l, l + 1):\n",
    "        for n in range(-l, l + 1):\n",
    "            res[m + l, n+ l] = Umn(l, m, n)\n",
    "    return res\n",
    "\n",
    "# Print it for l = 1\n",
    "U(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def REuler(l, alpha, beta, gamma):\n",
    "    \"\"\"Return the rotation matrix for a single degree `l`.\"\"\"\n",
    "    res = zeros(2 * l + 1, 2 * l + 1)\n",
    "    if l == 0:\n",
    "        res[0, 0] = 1\n",
    "        return res\n",
    "    foo = re(U(l).inv() * D(l, alpha, beta, gamma) * U(l))\n",
    "    for m in range(2 * l + 1):\n",
    "        for n in range(2 * l + 1):\n",
    "            if abs(foo[m, n]) < 1e-15:\n",
    "                res[m, n] = 0\n",
    "            else:\n",
    "                res[m, n] = foo[m, n]\n",
    "    return res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To make things easier to visualize, let's convert our rotation matrix to the axis-angle formalism."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "def RAxisAngle(l, u1, u2, u3, theta):\n",
    "    \"\"\"Axis-angle rotation matrix.\"\"\"\n",
    "    # Numerical tolerance\n",
    "    tol = 1e-16\n",
    "    if theta == 0:\n",
    "        theta = tol\n",
    "    if u1 == 0 and u2 == 0:\n",
    "        u1 = tol\n",
    "        u2 = tol\n",
    "        \n",
    "    # Elements of the transformation matrix\n",
    "    costheta = cos(theta)\n",
    "    sintheta = sin(theta)\n",
    "    RA01 = u1 * u2 * (1 - costheta) - u3 * sintheta\n",
    "    RA02 = u1 * u3 * (1 - costheta) + u2 * sintheta\n",
    "    RA11 = costheta + u2 * u2 * (1 - costheta)\n",
    "    RA12 = u2 * u3 * (1 - costheta) - u1 * sintheta\n",
    "    RA20 = u3 * u1 * (1 - costheta) - u2 * sintheta\n",
    "    RA21 = u3 * u2 * (1 - costheta) + u1 * sintheta\n",
    "    RA22 = costheta + u3 * u3 * (1 - costheta)\n",
    "\n",
    "    # Determine the Euler angles\n",
    "    if ((RA22 < -1 + tol) and (RA22 > -1 - tol)):\n",
    "        cosbeta = -1\n",
    "        sinbeta = 0\n",
    "        cosgamma = RA11\n",
    "        singamma = RA01\n",
    "        cosalpha = 1\n",
    "        sinalpha = 0\n",
    "    elif ((RA22 < 1 + tol) and (RA22 > 1 - tol)):\n",
    "        cosbeta = 1\n",
    "        sinbeta = 0\n",
    "        cosgamma = RA11\n",
    "        singamma = -RA01\n",
    "        cosalpha = 1\n",
    "        sinalpha = 0\n",
    "    else:\n",
    "        cosbeta = RA22\n",
    "        sinbeta = sqrt(1 - cosbeta ** 2)\n",
    "        norm1 = sqrt(RA20 * RA20 + RA21 * RA21)\n",
    "        norm2 = sqrt(RA02 * RA02 + RA12 * RA12)\n",
    "        cosgamma = -RA20 / norm1\n",
    "        singamma = RA21 / norm1\n",
    "        cosalpha = RA02 / norm2\n",
    "        sinalpha = RA12 / norm2\n",
    "    alpha = atan2(sinalpha, cosalpha)\n",
    "    beta = atan2(sinbeta, cosbeta)\n",
    "    gamma = atan2(singamma, cosgamma)\n",
    "    \n",
    "    return REuler(l, alpha, beta, gamma)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, note that `RAxisAngle` is the rotation matrix for a single degree `l`. To get the full rotation matrix, we construct it as a block diagonal matrix with the matrices for each `l` along the diagonal: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "def R(lmax, u1, u2, u3, theta):\n",
    "    \"\"\"Return the full axis-angle rotation matrix up to degree `lmax`.\"\"\"\n",
    "    blocks = [RAxisAngle(l, u1, u2, u3, theta) for l in range(lmax + 1)]\n",
    "    return BlockDiagMatrix(*blocks)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And just for fun, let's define a rotation function to operate on actual `starry` spherical harmonic maps:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rotate(map, u, theta):\n",
    "    \"\"\"Rotate a starry spherical harmonic map `y` using the rotation matrix defined above.\"\"\"\n",
    "    y = Matrix(map.y)\n",
    "    yrot = Matrix(R(map.lmax, u[0], u[1], u[2], theta)) * y\n",
    "    map[:] = np.array(yrot[:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Let's test some rotations!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "map = starry.Map(1)\n",
    "map[1, -1] = 1\n",
    "map.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Rotate 90 degrees counter-clockwise about xhat\n",
    "rotate(map, [1, 0, 0], np.pi / 2)\n",
    "map.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Rotate 90 degrees counter-clockwise about yhat\n",
    "rotate(map, [0, 1, 0], np.pi / 2)\n",
    "map.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 216x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Rotate 90 degrees counter-clockwise about zhat\n",
    "rotate(map, [0, 0, 1], np.pi / 2)\n",
    "map.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "■"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
