{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hypergeometric solution to $\\mathcal{I}_v$ and $\\mathcal{J}_v$\n",
    "\n",
    "#### Validation of the analytical solution to the integrals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's import some stuff:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy.integrate import quad\n",
    "import matplotlib.pyplot as pl\n",
    "from mpmath import hyp2f1, fac2\n",
    "from sympy import factorial\n",
    "%matplotlib inline\n",
    "epsabs=1e-12\n",
    "epsrel=1e-12"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's define the numerical form of the integrals:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "def I(v, k):\n",
    "    \"\"\"Return the integral I, evaluated numerically.\"\"\"\n",
    "    kappa = 2 * np.arcsin(k)\n",
    "    func = lambda x: np.sin(x) ** (2 * v)\n",
    "    res, err = quad(func, -0.5 * kappa, 0.5 * kappa, epsabs=epsabs, epsrel=epsrel)\n",
    "    return res\n",
    "\n",
    "def J(v, k):\n",
    "    \"\"\"Return the integral J, evaluated numerically.\"\"\"\n",
    "    kappa = 2 * np.arcsin(k)\n",
    "    func = lambda x: np.sin(x) ** (2 * v) * (1 - k ** (-2) * np.sin(x) ** 2) ** 1.5\n",
    "    res, err = quad(func, -0.5 * kappa, 0.5 * kappa, epsabs=epsabs, epsrel=epsrel)\n",
    "    return res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's also define our analytical solutions in terms of the Hypergeometric function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "def IHyper(v, k):\n",
    "    \"\"\"Return the integral I, evaluated analytically from 2F1.\"\"\"\n",
    "    return 2 * k ** (1 + 2 * v) / (1 + 2 * v) * float(hyp2f1(0.5, v + 0.5, v + 1.5, k ** 2))\n",
    "\n",
    "def JHyper(v, k):\n",
    "    \"\"\"Return the integral J, evaluated analytically from 2F1.\"\"\"\n",
    "    return float(k ** (1 + 2 * v) * 3 * np.pi / 4 * \\\n",
    "                 fac2(2 * v - 1) / (2 ** v * factorial(2 + v)) * \n",
    "                 hyp2f1(0.5, v + 0.5, v + 3, k ** 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's show that the error is close to the machine limit for $0 < k < 1$ and $v < 10$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The maximum relative error on I is 2.2204e-16.\n",
      "The maximum fractional error on I is 2.5677e-15.\n"
     ]
    }
   ],
   "source": [
    "maxrel = 0\n",
    "maxfrac = 0\n",
    "for k in np.logspace(-5, np.log10(0.5), 100):\n",
    "    for v in range(10):\n",
    "        I1 = I(v, k)\n",
    "        I2 = IHyper(v, k)\n",
    "        rel = np.abs(I1 - I2)\n",
    "        frac = np.abs(rel / I1)\n",
    "        if rel > maxrel:\n",
    "            maxrel = rel\n",
    "        if frac > maxfrac:\n",
    "            maxfrac = frac\n",
    "print(\"The maximum relative error on I is %.4e.\" % maxrel)\n",
    "print(\"The maximum fractional error on I is %.4e.\" % maxfrac)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The maximum relative error on J is 7.1609e-15.\n",
      "The maximum fractional error on J is 1.0977e-05.\n"
     ]
    }
   ],
   "source": [
    "maxrel = 0\n",
    "maxfrac = 0\n",
    "for k in np.logspace(-5, np.log10(0.5), 100):\n",
    "    for v in range(10):\n",
    "        J1 = J(v, k)\n",
    "        J2 = JHyper(v, k)\n",
    "        rel = np.abs(J1 - J2)\n",
    "        frac = np.abs(rel / J1)\n",
    "        if rel > maxrel:\n",
    "            maxrel = rel\n",
    "        if frac > maxfrac:\n",
    "            maxfrac = frac\n",
    "print(\"The maximum relative error on J is %.4e.\" % maxrel)\n",
    "print(\"The maximum fractional error on J is %.4e.\" % maxfrac)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that our expression for $\\mathcal{I}_v$ is extremely accurate, and agrees with the numerical solution just about as well as we could hope for. The expression for $\\mathcal{J}_v$, on the other hand, is close to the numerical solution in the relative sense, but shows higher fractional errors. This occurs because some of the solutions to $\\mathcal{J}_v$ are very small ($\\ll 10^{-10}$), particularly at large values of $v$, and the numerical solution to the integral is not very accurate.\n",
    "â– "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
