{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Green's basis\n",
    "\n",
    "#### Code to compute the terms in the Green's basis up to arbitrary $n$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We begin by importing some stuff and defining our functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from IPython.display import display, Math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gtilde(n):\n",
    "    \"\"\"Return the n^th term in the Green's basis as a string.\"\"\"\n",
    "    if n == 0:\n",
    "        return \"1\"\n",
    "    l = int(np.floor(np.sqrt(n)))\n",
    "    m = n - l * l - l\n",
    "    mu = l - m\n",
    "    nu = l + m\n",
    "    if (nu % 2 == 0):\n",
    "        I = [mu // 2]\n",
    "        J = [nu // 2]\n",
    "        K = [0]\n",
    "        C = [(mu + 2) // 2]\n",
    "    elif (l == 1) and (m == 0):\n",
    "        I = [0]\n",
    "        J = [0]\n",
    "        K = [1]\n",
    "        C = [1]\n",
    "    elif (mu == 1) and (l % 2 == 0):\n",
    "        I = [l - 2]\n",
    "        J = [1]\n",
    "        K = [1]\n",
    "        C = [3]\n",
    "    elif (mu == 1):\n",
    "        I = [l - 3, l - 1, l - 3]\n",
    "        J = [0, 0, 2]\n",
    "        K = [1, 1, 1]\n",
    "        C = [-1, 1, 4]\n",
    "    else:\n",
    "        I = [(mu - 5) // 2, (mu - 5) // 2, (mu - 1) // 2]\n",
    "        J = [(nu - 1) // 2, (nu + 3) // 2, (nu - 1) // 2]\n",
    "        K = [1, 1, 1]\n",
    "        C = [(mu - 3) // 2, -(mu - 3) // 2, -(mu + 3) // 2]\n",
    "    \n",
    "    res = []\n",
    "    for i, j, k, c in zip(I, J, K, C):\n",
    "        if c == 0:\n",
    "            continue\n",
    "        elif c == 1:\n",
    "            term = \"\"\n",
    "        elif c == -1:\n",
    "            term = \"-\"\n",
    "        else:\n",
    "            term = \"%d\" % c\n",
    "        for base, exp in zip([\"x\", \"y\", \"z\"], [i, j, k]):\n",
    "            if exp == 0:\n",
    "                continue\n",
    "            elif exp == 1:\n",
    "                term += \"{%s}\" % (base)\n",
    "            else:    \n",
    "                term += \"{%s}^{%d}\" % (base, exp)\n",
    "        res.append(term)\n",
    "        \n",
    "    res = \" + \".join(res)\n",
    "    res = res.replace(\"+ -\", \"-\")\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_gtilde(lmax):\n",
    "    \"\"\"Print all the terms in the Green's basis up to degree l = lmax.\"\"\"\n",
    "    n = 0\n",
    "    for l in range(lmax + 1):\n",
    "        res = \"\"\n",
    "        for m in range(-l, l + 1):\n",
    "            res += \"\\\\ \\\\ \\\\ \\\\ \" + gtilde(n)\n",
    "            n += 1\n",
    "        display(Math(res))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given these definitions, here's what the Green's basis looks like up to $l = 4$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\ \\ \\ \\ 1$$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$$\\ \\ \\ \\ 2{x}\\ \\ \\ \\ {z}\\ \\ \\ \\ {y}$$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$$\\ \\ \\ \\ 3{x}^{2}\\ \\ \\ \\ -3{x}{z}\\ \\ \\ \\ 2{x}{y}\\ \\ \\ \\ 3{y}{z}\\ \\ \\ \\ {y}^{2}$$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$$\\ \\ \\ \\ 4{x}^{3}\\ \\ \\ \\ {z} -{y}^{2}{z} -4{x}^{2}{z}\\ \\ \\ \\ 3{x}^{2}{y}\\ \\ \\ \\ -3{x}{y}{z}\\ \\ \\ \\ 2{x}{y}^{2}\\ \\ \\ \\ -{z} + {x}^{2}{z} + 4{y}^{2}{z}\\ \\ \\ \\ {y}^{3}$$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$$\\ \\ \\ \\ 5{x}^{4}\\ \\ \\ \\ 2{x}{z} -2{x}{y}^{2}{z} -5{x}^{3}{z}\\ \\ \\ \\ 4{x}^{3}{y}\\ \\ \\ \\ {y}{z} -{y}^{3}{z} -4{x}^{2}{y}{z}\\ \\ \\ \\ 3{x}^{2}{y}^{2}\\ \\ \\ \\ -3{x}{y}^{2}{z}\\ \\ \\ \\ 2{x}{y}^{3}\\ \\ \\ \\ 3{x}^{2}{y}{z}\\ \\ \\ \\ {y}^{4}$$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print_gtilde(4)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
