{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Quadratic limb darkening\n",
    "\n",
    "#### Code to express the quadratic limb darkening specific intensity map as a sum of spherical harmonics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We begin by importing some stuff and defining our functions. Note that these are all defined in `A.ipynb`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Using sympy version 1.1.2.dev\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from IPython.display import display, Math\n",
    "import sympy\n",
    "from sympy import *\n",
    "from sympy.functions.special.tensor_functions import KroneckerDelta\n",
    "\n",
    "# Initialize the session\n",
    "init_session(quiet=True)\n",
    "\n",
    "# I am using the dev version of sympy\n",
    "print(\"Using sympy version\", sympy.__version__)\n",
    "\n",
    "# Define our symbols\n",
    "x, y, z, mu, nu, l, m, j, k, p, q, n, u1, u2 = symbols('x y z mu nu l m j k p q n u1 u2')\n",
    "y0 = Symbol('Y_0,0')\n",
    "y1 = Symbol('Y_1,-1')\n",
    "y2 = Symbol('Y_1,0')\n",
    "y3 = Symbol('Y_1,1')\n",
    "y4 = Symbol('Y_2,-2')\n",
    "y5 = Symbol('Y_2,-1')\n",
    "y6 = Symbol('Y_2,0')\n",
    "y7 = Symbol('Y_2,1')\n",
    "y8 = Symbol('Y_2,2')\n",
    "\n",
    "# Definitions from `bp.ipynb`\n",
    "def ptilde(n, x, y):\n",
    "    \"\"\"Return the n^th term in the polynomial basis.\"\"\"\n",
    "    l = floor(sqrt(n))\n",
    "    m = n - l * l - l\n",
    "    mu = l - m\n",
    "    nu = l + m\n",
    "    if (nu % 2 == 0):\n",
    "        i = mu // 2\n",
    "        j = nu // 2\n",
    "        k = 0\n",
    "    else:\n",
    "        i = (mu - 1) // 2\n",
    "        j = (nu - 1) // 2\n",
    "        k = 1\n",
    "    return x ** i * y ** j * sqrt(1 - x ** 2 - y ** 2) ** k\n",
    "\n",
    "# Definitions from `ylmxyz.ipynb`\n",
    "def A(l, m):\n",
    "    \"\"\"A spherical harmonic normalization constant.\"\"\"\n",
    "    return sqrt((2 - KroneckerDelta(m, 0)) * (2 * l + 1) * factorial(l - m) / (4 * pi * factorial(l + m)))\n",
    "\n",
    "def B(l, m, j, k):\n",
    "    \"\"\"Another spherical harmonic normalization constant.\"\"\"\n",
    "    try: \n",
    "        ratio = factorial((l + m + k - 1) / 2) / factorial((-l + m + k - 1) / 2)\n",
    "    except ValueError:\n",
    "        ratio = 0\n",
    "    return 2 ** l * factorial(m) / (factorial(j) * factorial(k) * factorial(m - j) * factorial(l - m - k)) * ratio\n",
    "\n",
    "def C(p, q, k):\n",
    "    \"\"\"Return the binomial theorem coefficient `C`.\"\"\"\n",
    "    return factorial(k / 2) / (factorial(q / 2) * factorial((k - p) / 2) * factorial((p - q) / 2))\n",
    "\n",
    "def Y(l, m, x, y):\n",
    "    \"\"\"Return the spherical harmonic of degree `l` and order `m`.\"\"\"\n",
    "    res = 0\n",
    "    z = sqrt(1 - x ** 2 - y ** 2)\n",
    "    if (m >= 0):\n",
    "        for j in range(0, m + 1, 2):\n",
    "            for k in range(0, l - m + 1, 2):\n",
    "                for p in range(0, k + 1, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p) // 2) * A(l, m) * B(l, m, j, k) * C(p, q, k) * x ** (m - j + p - q) * y ** (j + q)\n",
    "            for k in range(1, l - m + 1, 2):\n",
    "                for p in range(0, k, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p) // 2) * A(l, m) * B(l, m, j, k) * C(p, q, k - 1) * x ** (m - j + p - q) * y ** (j + q) * z          \n",
    "    else:\n",
    "        for j in range(1, abs(m) + 1, 2):\n",
    "            for k in range(0, l - abs(m) + 1, 2):\n",
    "                for p in range(0, k + 1, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p - 1) // 2) * A(l, abs(m)) * B(l, abs(m), j, k) * C(p, q, k) * x ** (abs(m) - j + p - q) * y ** (j + q)\n",
    "            for k in range(1, l - abs(m) + 1, 2):\n",
    "                for p in range(0, k, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p - 1) // 2) * A(l, abs(m)) * B(l, abs(m), j, k) * C(p, q, k - 1) * x ** (abs(m) - j + p - q) * y ** (j + q) * z\n",
    "\n",
    "    return res\n",
    "\n",
    "def Coefficient(expression, term):\n",
    "    \"\"\"Return the coefficient multiplying `term` in `expression`.\"\"\"\n",
    "    # Get the coefficient\n",
    "    coeff = expression.coeff(term)\n",
    "    # Set any non-constants in this coefficient to zero. If the coefficient\n",
    "    # is not a constant, this is not the term we are interested in!\n",
    "    coeff = coeff.subs(sqrt(1 - x ** 2 - y ** 2), 0).subs(x, 0).subs(y, 0)\n",
    "    return coeff\n",
    "\n",
    "def p_Y(l, m, lmax):\n",
    "    \"\"\"Return the polynomial basis representation of the spherical harmonic `Y_{lm}`.\"\"\"\n",
    "    ylm = Y(l, m, x, y)\n",
    "    res = [ylm.subs(sqrt(1 - x ** 2 - y ** 2), 0).subs(x, 0).subs(y, 0)]\n",
    "    for n in range(1, (lmax + 1) ** 2):\n",
    "        res.append(Coefficient(ylm, ptilde(n, x, y)))\n",
    "    return res\n",
    "\n",
    "def A1(lmax):\n",
    "    \"\"\"Return the change of basis matrix A1. The columns of this matrix are given by `p_Y`.\"\"\"\n",
    "    res = zeros((lmax + 1) ** 2, (lmax + 1) ** 2)\n",
    "    n = 0\n",
    "    for l in range(lmax + 1):\n",
    "        for m in range(-l, l + 1):\n",
    "            res[n] = p_Y(l, m, lmax)\n",
    "            n += 1\n",
    "    return res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The specific intensity for a quadratically limb-darkened source is\n",
    "\n",
    "\\begin{align}\n",
    "\\frac{I(\\mu)}{I(1)} &= 1 - u_1 (1 - \\mu) - u_2 (1 - \\mu)^2 \\\\\n",
    "                    &= (1 - u_1 - u_2) + (u_1 + 2 u_2) \\mu - u_2 \\mu^2\n",
    "\\end{align}\n",
    "\n",
    "Noting that $\\mu = \\cos\\theta = z$ and that $z^2 = 1 - x^2 - y^2$, we may write\n",
    "\n",
    "\\begin{align}\n",
    "\\frac{I(x, y)}{I(1)} = (1 - u_1 - 2 u_2) + (u1 + 2 u_2) z + (u_2) x^2 + (u_2) y^2\n",
    "\\end{align}\n",
    "\n",
    "This can be expressed in the polynomial basis as the vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAd4AAAAZBAMAAABtKlJIAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAu90iEM0ydpnvVGZEq4nzK3U/AAAACXBIWXMAAA7EAAAOxAGVKw4bAAADtklEQVRYCe2YPWgTYRjH/03ONG1i2oqDSyGkiCh+BDeR0kMHdaiWQpZCaRZHaSYVQZoWi10qRfycGhe1XdrBQRftJLjYIH5NtiC1BUGKFhWxje+9l8s999z7JhedSr2h93z+nvffN/deCHak0tgqVzx1EMmtIlbq7Pyv17ff4bG2rC+oCRjXngap1SMDAU5+/kTn8x7uk9og+9uNxG/Swswpkwa2FYwO6mtsPTIQoA/H6KHDe7hPFhFE72vgLmmxzQf2zXi/YNLcE2CJ+sxuztkBJVKmagBkTWwCiR5C5j3cJ6VB9F4HFrKkR5plvcCQSVPtwIwnQJOAo1eJlKU1ALKmoYjmNQLmPdwnpUH0DpjB9a4D8wXCZ6ajV4mUtTUAsqaliPgvQuY93CelVK9xMYcjJkm65iHzxFWEb7gBqPfX+Cn0lj+zVjFHOnpFyo+UDTUAVg3O5BH/IS35xze0CoPqjTZPYMjFECu+gfwUGldJSK03vAEMLrplHOnqVSCttloAie5aREQMci7ew326CKr3aLQHbUCEHgU2M1QMz46ioRWJ4SvlKRq94l9L9XKkq1eBtMhhNWBll1mea9268l69rKcaw9Jr9KbEtTtrNuVwG5HxpMV0gpaNMRgiI9If8cbylzKZvZlMv2V6zyv+0fIgE5lM781MpijbOFIGxVixdvpA2IBEejvdhDo/z5RB9xfzZuS7OEOT5dmVW2MeiK9hMIsODKbtsHp/IY6KmUKlUazdi6zsrwop25SAUDryjUBbxPnMzivP0CoMj94R+Yj69T5EOB1NWs/2fnTN2YM1esXz8MwkS2PIil4VUrYpAaG5MP3GIx6sGH0f8R7uy0XYDI/edvGIPvLvbySPxrR457XFhBLn7arRK171o0QuGNLRq0TKPjXA+74V3zfEUeNevIf79iIkw6N3GC/yi369h7+svEK0NX4nIUbsKY/R6A0VjFvuQgCGdPQqkbJPDUAoR6n7cCpLfN7DfXsRkuHR2718/13Wr3egVPoK48Olc+eBRL48x9E7Ptk/S0Yby5ezxAVDOnqVSNmnBmCFQnH6wlvq8x7u24uQDI9em+F/fgn7sWM7eh2/6r2CdPTS6gqSBpkdy7PAX7iSUafe+GI8a486Xs/Eil6jfLqTZhdJgtx8iec8VLcvGSq9E3rU2el7pj6rzYgvbtorCDLSN71TCwiYsBl+veGR9ZwWMVkqaXP6xD8jm0qlVT0+WMZm+PUG696sVf/1btadC7buTqS21O/PB/4AFXdaSK5m3wcAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}- u_{1} - 2 u_{2} + 1 & 0 & u_{1} + 2 u_{2} & 0 & u_{2} & 0 & 0 & 0 & u_{2}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "[-u₁ - 2⋅u₂ + 1  0  u₁ + 2⋅u₂  0  u₂  0  0  0  u₂]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pvec = Matrix([1 - u1 - 2 * u2, 0, u1 + 2 * u2, 0, u2, 0, 0, 0, u2])\n",
    "pvec.T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can easily transform this into the spherical harmonic basis via the (inverse of the) change of basis matrix $\\mathbf{A_1}$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}1.33333333333333 \\sqrt{\\pi} u_{2} + 2.0 \\sqrt{\\pi} \\left(- u_{1} - 2 u_{2} + 1\\right)\\\\0\\\\0.666666666666667 \\sqrt{3} \\sqrt{\\pi} \\left(u_{1} + 2 u_{2}\\right)\\\\0\\\\0\\\\0\\\\- 0.266666666666667 \\sqrt{5} \\sqrt{\\pi} u_{2}\\\\0\\\\0\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1.33333333333333⋅√π⋅u₂ + 2.0⋅√π⋅(-u₁ - 2⋅u₂ + 1)⎤\n",
       "⎢                                                ⎥\n",
       "⎢                       0                        ⎥\n",
       "⎢                                                ⎥\n",
       "⎢      0.666666666666667⋅√3⋅√π⋅(u₁ + 2⋅u₂)       ⎥\n",
       "⎢                                                ⎥\n",
       "⎢                       0                        ⎥\n",
       "⎢                                                ⎥\n",
       "⎢                       0                        ⎥\n",
       "⎢                                                ⎥\n",
       "⎢                       0                        ⎥\n",
       "⎢                                                ⎥\n",
       "⎢          -0.266666666666667⋅√5⋅√π⋅u₂           ⎥\n",
       "⎢                                                ⎥\n",
       "⎢                       0                        ⎥\n",
       "⎢                                                ⎥\n",
       "⎣                       0                        ⎦"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yvec = A1(2).inv() * pvec\n",
    "yvec"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Recalling that the basis of spherical harmonics is"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAg4AAAAZBAMAAACr2bsAAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAu90iEKvvVHYyzYlEZpkbaLYqAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAEJUlEQVRYCe1ZPWhUQRCeXH5eztwRlHSCCRFBUMmlSGuusTWiIpIqnUGQJIpJmesDmsoigkmX0gMbCwlXKjbpLAQ9JVY2EZOAGjhnd+bd23m7bx68Ntni3s7M9zM72fuBwLnxGpz0VRm/AmMnfQj2/FOnc+jOoe9e5w7A8lEjcDNuLBzWIFqYD5Q4pSGUmmZKyvkIKKgfoNn7UP6LzmcWg2fd3ML0drDESQ2h1DRTUs5HQEF9n0bviwn8qHwXPmvpN8BQK1yjrIbQaoop2+UjCur7NJrD8yZUw9cBBv8BfNLGoCI0tmLKfvmIgvo+jeYwMwfvM87adwSVRkaN0hpCqymm7JePKKjv02gOPcflZtZZR1svs0qc1xBKTTMl5XwEFNT3aDSH6PBm5llX77Yza1TQEEpNMyXhfAQU1PdoNAfo3AIYfGvvxNqaPPbwIcblLScpAsw7CNZIwE4NNpK03RnToW97SVYEJu0hPA2rv3OhjmDP22EHWyYamfIcRmsAn+EpqlWbEbbnrB78wij/GEsyIjBpB0EaCdatvbrt5M3WmL6B2SQrgiDC0zDeQ7X+LUR73ol+sGWmkSnP4SHqXIXhOkCpBQcYJGtgC/fRWJKQAeYdBGk4WKcGj5282RrTi7CJ0+AlApPzEJ6G0S/VyjgN7t/QeDls0T+WHRqZ0hx68cux7w8MLALMrMODWMg+p5v4EDoiwGKCYA2Hn9QgfQZjis1Pt7pwEWDWR6Q1rHep1Xvc7b8rJtihlonGHdAcqqiDMy3tgvnzXEu0cPe1hS9CRwQCwRqYi5fLTt0HY4prtW4f9CICCCBSGtQdRHiFPW+XHWzZ0rgDmkPPPuocQKmBc6jDZacxfBebSOiIAIsJgjUcflLz7oMxxSXcRAABRHoOVt827nm77GDLlsYd2Dn0v/7VNPMcaNj7MG/ai9ds5zxuhY4IABwEa8RcUUvPwZrih1w7QcsAQojUHMgbdlAj7S3YwZYtjTug+2Bawff2cMt+PtB9NbnuIp2ls7jqcigxxCJYI87FT+4idQaqfjGPyAiPANggZsVPgQhqVNuIzfAmydQcSNrS2DSZQ9b3heUIHRGQZHxjvO8Llx06Q6VZWY8lQARxViZDGvARPiA66M3sYMtEI4Qzh2f4+2GyPthO/X6gk8xBL/69aEVz8c55YhIRRsNfVINlvwIbK0v1yToXTOBhBCKoUd5eGcnyZnaoZaaRqTOHoZ978GIXdnb8Xnq/HzbKj7hFE3jdMsJoeItr1yfueyVY6HSMKS0TeEsgghoDnc4+dhf0JnawZaaRqTMH28Gi10c3EXV3WRsNodUUU7bKRxTUj2mpOUS1rDMCPMkucUVDKDXNlJTzEVp3GjtuKzWHqnLWXaVGJQ2h1DRTEs5HQEH9mDYF46f/v4DK+KX/79aPWVodkhcAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}Y_{0,0} & Y_{1,-1} & Y_{1,0} & Y_{1,1} & Y_{2,-2} & Y_{2,-1} & Y_{2,0} & Y_{2,1} & Y_{2,2}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "[Y_0,0  Y_1,-1  Y_1,0  Y_1,1  Y_2,-2  Y_2,-1  Y_2,0  Y_2,1  Y_2,2]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ybasis = Matrix([y0, y1, y2, y3, y4, y5, y6, y7, y8])\n",
    "ybasis.T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we can dot our vector in to get the expression for the specific intensity in spherical harmonics:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\frac{2 \\sqrt{\\pi} \\left(5 Y_{0,0} \\left(- 3 u_{1} - 4 u_{2} + 3\\right) + 5 \\sqrt{3} Y_{1,0} \\left(u_{1} + 2 u_{2}\\right) - 2 \\sqrt{5} Y_{2,0} u_{2}\\right)}{15}$$"
      ],
      "text/plain": [
       "2⋅√π⋅(5⋅Y_0,0⋅(-3⋅u₁ - 4⋅u₂ + 3) + 5⋅√3⋅Y_1,0⋅(u₁ + 2⋅u₂) - 2⋅√5⋅Y_2,0⋅u₂)\n",
       "──────────────────────────────────────────────────────────────────────────\n",
       "                                    15                                    "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simplify(yvec.dot(ybasis), rational=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "■"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
