{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Change of basis matrices\n",
    "\n",
    "## A1\n",
    "\n",
    "#### Code to compute the change of basis matrix $A_1$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We begin by importing some stuff and defining our functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Using sympy version 1.3\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from IPython.display import display, Math\n",
    "import sympy\n",
    "from sympy import *\n",
    "from sympy.functions.special.tensor_functions import KroneckerDelta\n",
    "\n",
    "# Initialize the session\n",
    "init_session(quiet=True)\n",
    "\n",
    "# I am using the dev version of sympy\n",
    "print(\"Using sympy version\", sympy.__version__)\n",
    "\n",
    "# Define our symbols\n",
    "x, y, z, mu, nu, l, m, j, k, p, q, n = symbols('x y z mu nu l m j k p q n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definitions from `bp.ipynb`\n",
    "def ptilde(n, x, y):\n",
    "    \"\"\"Return the n^th term in the polynomial basis.\"\"\"\n",
    "    l = floor(sqrt(n))\n",
    "    m = n - l * l - l\n",
    "    mu = l - m\n",
    "    nu = l + m\n",
    "    if (nu % 2 == 0):\n",
    "        i = mu // 2\n",
    "        j = nu // 2\n",
    "        k = 0\n",
    "    else:\n",
    "        i = (mu - 1) // 2\n",
    "        j = (nu - 1) // 2\n",
    "        k = 1\n",
    "    return x ** i * y ** j * sqrt(1 - x ** 2 - y ** 2) ** k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definitions from `ylmxyz.ipynb`\n",
    "def A(l, m):\n",
    "    \"\"\"A spherical harmonic normalization constant.\"\"\"\n",
    "    return sqrt((2 - KroneckerDelta(m, 0)) * (2 * l + 1) * factorial(l - m) / (4 * pi * factorial(l + m)))\n",
    "\n",
    "def B(l, m, j, k):\n",
    "    \"\"\"Another spherical harmonic normalization constant.\"\"\"\n",
    "    try: \n",
    "        ratio = factorial((l + m + k - 1) / 2) / factorial((-l + m + k - 1) / 2)\n",
    "    except ValueError:\n",
    "        ratio = 0\n",
    "    return 2 ** l * factorial(m) / (factorial(j) * factorial(k) * factorial(m - j) * factorial(l - m - k)) * ratio\n",
    "\n",
    "def C(p, q, k):\n",
    "    \"\"\"Return the binomial theorem coefficient `C`.\"\"\"\n",
    "    return factorial(k / 2) / (factorial(q / 2) * factorial((k - p) / 2) * factorial((p - q) / 2))\n",
    "\n",
    "def Y(l, m, x, y):\n",
    "    \"\"\"Return the spherical harmonic of degree `l` and order `m`.\"\"\"\n",
    "    res = 0\n",
    "    z = sqrt(1 - x ** 2 - y ** 2)\n",
    "    if (m >= 0):\n",
    "        for j in range(0, m + 1, 2):\n",
    "            for k in range(0, l - m + 1, 2):\n",
    "                for p in range(0, k + 1, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p) // 2) * A(l, m) * B(l, m, j, k) * C(p, q, k) * x ** (m - j + p - q) * y ** (j + q)\n",
    "            for k in range(1, l - m + 1, 2):\n",
    "                for p in range(0, k, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p) // 2) * A(l, m) * B(l, m, j, k) * C(p, q, k - 1) * x ** (m - j + p - q) * y ** (j + q) * z          \n",
    "    else:\n",
    "        for j in range(1, abs(m) + 1, 2):\n",
    "            for k in range(0, l - abs(m) + 1, 2):\n",
    "                for p in range(0, k + 1, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p - 1) // 2) * A(l, abs(m)) * B(l, abs(m), j, k) * C(p, q, k) * x ** (abs(m) - j + p - q) * y ** (j + q)\n",
    "            for k in range(1, l - abs(m) + 1, 2):\n",
    "                for p in range(0, k, 2):\n",
    "                    for q in range(0, p + 1, 2):\n",
    "                        res += (-1) ** ((j + p - 1) // 2) * A(l, abs(m)) * B(l, abs(m), j, k) * C(p, q, k - 1) * x ** (abs(m) - j + p - q) * y ** (j + q) * z\n",
    "\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Coefficient(expression, term):\n",
    "    \"\"\"Return the coefficient multiplying `term` in `expression`.\"\"\"\n",
    "    # Get the coefficient\n",
    "    coeff = expression.coeff(term)\n",
    "    # Set any non-constants in this coefficient to zero. If the coefficient\n",
    "    # is not a constant, this is not the term we are interested in!\n",
    "    coeff = coeff.subs(sqrt(1 - x ** 2 - y ** 2), 0).subs(x, 0).subs(y, 0)\n",
    "    return coeff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def p_Y(l, m, lmax):\n",
    "    \"\"\"Return the polynomial basis representation of the spherical harmonic `Y_{lm}`.\"\"\"\n",
    "    ylm = Y(l, m, x, y)\n",
    "    res = [ylm.subs(sqrt(1 - x ** 2 - y ** 2), 0).subs(x, 0).subs(y, 0)]\n",
    "    for n in range(1, (lmax + 1) ** 2):\n",
    "        res.append(Coefficient(ylm, ptilde(n, x, y)))\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def A1(lmax):\n",
    "    \"\"\"Return the change of basis matrix A1. The columns of this matrix are given by `p_Y`.\"\"\"\n",
    "    res = zeros((lmax + 1) ** 2, (lmax + 1) ** 2)\n",
    "    n = 0\n",
    "    for l in range(lmax + 1):\n",
    "        for m in range(-l, l + 1):\n",
    "            res[n] = p_Y(l, m, lmax)\n",
    "            n += 1\n",
    "    return res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can finally evaluate the change of basis matrix for $l_\\mathrm{max} = 2$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}\\frac{0.5}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0 & \\frac{0.5 \\sqrt{5}}{\\sqrt{\\pi}} & 0 & 0\\\\0 & 0 & 0 & \\frac{0.5 \\sqrt{3}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & \\frac{0.5 \\sqrt{3}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & \\frac{0.5 \\sqrt{3}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & - \\frac{0.75 \\sqrt{5}}{\\sqrt{\\pi}} & 0 & \\frac{0.25 \\sqrt{15}}{\\sqrt{\\pi}}\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & \\frac{0.5 \\sqrt{15}}{\\sqrt{\\pi}} & 0\\\\0 & 0 & 0 & 0 & \\frac{0.5 \\sqrt{15}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & \\frac{0.5 \\sqrt{15}}{\\sqrt{\\pi}} & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & - \\frac{0.75 \\sqrt{5}}{\\sqrt{\\pi}} & 0 & - \\frac{0.25 \\sqrt{15}}{\\sqrt{\\pi}}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡0.5                                             0.5⋅√5                       \n",
       "⎢───    0       0       0        0        0      ──────       0         0     \n",
       "⎢ √π                                               √π                         \n",
       "⎢                                                                             \n",
       "⎢                     0.5⋅√3                                                  \n",
       "⎢ 0     0       0     ──────     0        0         0         0         0     \n",
       "⎢                       √π                                                    \n",
       "⎢                                                                             \n",
       "⎢             0.5⋅√3                                                          \n",
       "⎢ 0     0     ──────    0        0        0         0         0         0     \n",
       "⎢               √π                                                            \n",
       "⎢                                                                             \n",
       "⎢     0.5⋅√3                                                                  \n",
       "⎢ 0   ──────    0       0        0        0         0         0         0     \n",
       "⎢       √π                                                                    \n",
       "⎢                                                                             \n",
       "⎢                                               -0.75⋅√5             0.25⋅√15 \n",
       "⎢ 0     0       0       0        0        0     ─────────     0      ──────── \n",
       "⎢                                                   √π                  √π    \n",
       "⎢                                                                             \n",
       "⎢                                                          0.5⋅√15            \n",
       "⎢ 0     0       0       0        0        0         0      ───────      0     \n",
       "⎢                                                             √π              \n",
       "⎢                                                                             \n",
       "⎢                             0.5⋅√15                                         \n",
       "⎢ 0     0       0       0     ───────     0         0         0         0     \n",
       "⎢                                √π                                           \n",
       "⎢                                                                             \n",
       "⎢                                      0.5⋅√15                                \n",
       "⎢ 0     0       0       0        0     ───────      0         0         0     \n",
       "⎢                                         √π                                  \n",
       "⎢                                                                             \n",
       "⎢                                               -0.75⋅√5            -0.25⋅√15 \n",
       "⎢ 0     0       0       0        0        0     ─────────     0     ──────────\n",
       "⎣                                                   √π                  √π    \n",
       "\n",
       "⎤\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎥\n",
       "⎦"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A1(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "■"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A2\n",
    "\n",
    "#### Code to compute the change of basis matrix $A_2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definitions from `bp.ipynb`\n",
    "def gtilde(n, x, y):\n",
    "    \"\"\"Return the n^th term in the Green's basis.\"\"\"\n",
    "    l = floor(sqrt(n))\n",
    "    m = n - l * l - l\n",
    "    mu = l - m\n",
    "    nu = l + m\n",
    "    if (nu % 2 == 0):\n",
    "        I = [mu // 2]\n",
    "        J = [nu // 2]\n",
    "        K = [0]\n",
    "        C = [(mu + 2) // 2]\n",
    "    elif (l == 1) and (m == 0):\n",
    "        I = [0]\n",
    "        J = [0]\n",
    "        K = [1]\n",
    "        C = [1]\n",
    "    elif (mu == 1) and (l % 2 == 0):\n",
    "        I = [l - 2]\n",
    "        J = [1]\n",
    "        K = [1]\n",
    "        C = [3]\n",
    "    elif (mu == 1):\n",
    "        I = [l - 3, l - 1, l - 3]\n",
    "        J = [0, 0, 2]\n",
    "        K = [1, 1, 1]\n",
    "        C = [-1, 1, 4]\n",
    "    else:\n",
    "        I = [(mu - 5) // 2, (mu - 5) // 2, (mu - 1) // 2]\n",
    "        J = [(nu - 1) // 2, (nu + 3) // 2, (nu - 1) // 2]\n",
    "        K = [1, 1, 1]\n",
    "        C = [(mu - 3) // 2, -(mu - 3) // 2, -(mu + 3) // 2]\n",
    "    \n",
    "    res = 0\n",
    "    for i, j, k, c in zip(I, J, K, C):\n",
    "        res += c * x ** i * y ** j * sqrt(1 - x ** 2 - y ** 2) ** k\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def p_G(n, lmax):\n",
    "    \"\"\"Return the polynomial basis representation of the Green's polynomial `g`.\"\"\"\n",
    "    g = gtilde(n, x, y)\n",
    "    res = [g.subs(sqrt(1 - x ** 2 - y ** 2), 0).subs(x, 0).subs(y, 0)]\n",
    "    for n in range(1, (lmax + 1) ** 2):\n",
    "        res.append(Coefficient(g, ptilde(n, x, y)))\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def A2(lmax):\n",
    "    \"\"\"Return the change of basis matrix A2. The columns of the **inverse** of this matrix are given by `p_G`.\"\"\"\n",
    "    res = zeros((lmax + 1) ** 2, (lmax + 1) ** 2)\n",
    "    n = 0\n",
    "    for l in range(lmax + 1):\n",
    "        for m in range(-l, l + 1):\n",
    "            res[n] = p_G(n, lmax)\n",
    "            n += 1\n",
    "    return res.inv()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & \\frac{1}{2} & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & \\frac{1}{3} & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & - \\frac{1}{3} & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & \\frac{1}{2} & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & \\frac{1}{3} & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1   0   0  0   0    0     0    0   0⎤\n",
       "⎢                                    ⎥\n",
       "⎢0  1/2  0  0   0    0     0    0   0⎥\n",
       "⎢                                    ⎥\n",
       "⎢0   0   1  0   0    0     0    0   0⎥\n",
       "⎢                                    ⎥\n",
       "⎢0   0   0  1   0    0     0    0   0⎥\n",
       "⎢                                    ⎥\n",
       "⎢0   0   0  0  1/3   0     0    0   0⎥\n",
       "⎢                                    ⎥\n",
       "⎢0   0   0  0   0   -1/3   0    0   0⎥\n",
       "⎢                                    ⎥\n",
       "⎢0   0   0  0   0    0    1/2   0   0⎥\n",
       "⎢                                    ⎥\n",
       "⎢0   0   0  0   0    0     0   1/3  0⎥\n",
       "⎢                                    ⎥\n",
       "⎣0   0   0  0   0    0     0    0   1⎦"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A2(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "■"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A\n",
    "\n",
    "#### Code to compute the full change of basis matrix $A$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is now easy: it's just the dot product of the previous two matrices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def AFull(lmax):\n",
    "    \"\"\"Return the full change of basis matrix.\"\"\"\n",
    "    return A2(lmax) * A1(lmax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}\\frac{0.5}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0 & \\frac{0.5 \\sqrt{5}}{\\sqrt{\\pi}} & 0 & 0\\\\0 & 0 & 0 & \\frac{0.25 \\sqrt{3}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & \\frac{0.5 \\sqrt{3}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & \\frac{0.5 \\sqrt{3}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & - \\frac{0.25 \\sqrt{5}}{\\sqrt{\\pi}} & 0 & \\frac{0.0833333333333333 \\sqrt{15}}{\\sqrt{\\pi}}\\\\0 & 0 & 0 & 0 & 0 & 0 & 0 & - \\frac{0.166666666666667 \\sqrt{15}}{\\sqrt{\\pi}} & 0\\\\0 & 0 & 0 & 0 & \\frac{0.25 \\sqrt{15}}{\\sqrt{\\pi}} & 0 & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & \\frac{0.166666666666667 \\sqrt{15}}{\\sqrt{\\pi}} & 0 & 0 & 0\\\\0 & 0 & 0 & 0 & 0 & 0 & - \\frac{0.75 \\sqrt{5}}{\\sqrt{\\pi}} & 0 & - \\frac{0.25 \\sqrt{15}}{\\sqrt{\\pi}}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡0.5                                                             0.5⋅√5       \n",
       "⎢───    0       0        0        0                0             ──────       \n",
       "⎢ √π                                                               √π         \n",
       "⎢                                                                             \n",
       "⎢                     0.25⋅√3                                                 \n",
       "⎢ 0     0       0     ───────     0                0                0         \n",
       "⎢                        √π                                                   \n",
       "⎢                                                                             \n",
       "⎢             0.5⋅√3                                                          \n",
       "⎢ 0     0     ──────     0        0                0                0         \n",
       "⎢               √π                                                            \n",
       "⎢                                                                             \n",
       "⎢     0.5⋅√3                                                                  \n",
       "⎢ 0   ──────    0        0        0                0                0         \n",
       "⎢       √π                                                                    \n",
       "⎢                                                                             \n",
       "⎢                                                               -0.25⋅√5      \n",
       "⎢ 0     0       0        0        0                0            ─────────     \n",
       "⎢                                                                   √π        \n",
       "⎢                                                                             \n",
       "⎢                                                                          -0.\n",
       "⎢ 0     0       0        0        0                0                0      ───\n",
       "⎢                                                                             \n",
       "⎢                                                                             \n",
       "⎢                              0.25⋅√15                                       \n",
       "⎢ 0     0       0        0     ────────            0                0         \n",
       "⎢                                 √π                                          \n",
       "⎢                                                                             \n",
       "⎢                                        0.166666666666667⋅√15                \n",
       "⎢ 0     0       0        0        0      ─────────────────────      0         \n",
       "⎢                                                  √π                         \n",
       "⎢                                                                             \n",
       "⎢                                                               -0.75⋅√5      \n",
       "⎢ 0     0       0        0        0                0            ─────────     \n",
       "⎣                                                                   √π        \n",
       "\n",
       "                                            ⎤\n",
       "        0                       0           ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "        0                       0           ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "        0                       0           ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "        0                       0           ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "                      0.0833333333333333⋅√15⎥\n",
       "        0             ──────────────────────⎥\n",
       "                                √π          ⎥\n",
       "                                            ⎥\n",
       "166666666666667⋅√15                         ⎥\n",
       "────────────────────            0           ⎥\n",
       "        √π                                  ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "        0                       0           ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "        0                       0           ⎥\n",
       "                                            ⎥\n",
       "                                            ⎥\n",
       "                            -0.25⋅√15       ⎥\n",
       "        0                   ──────────      ⎥\n",
       "                                √π          ⎦"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "AFull(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "■"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
