{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Closed-form solution to $\\mathcal{I}_v$ for $k^2 > 1$\n",
    "\n",
    "#### Validation of the analytical solution to the integral"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's import some stuff:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy.integrate import quad\n",
    "import matplotlib.pyplot as pl\n",
    "from mpmath import hyp2f1, fac2\n",
    "from sympy import factorial\n",
    "%matplotlib inline\n",
    "epsabs=1e-8\n",
    "epsrel=1e-8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's define the numerical form of the integral:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def I(v, k):\n",
    "    \"\"\"Return the integral I, evaluated numerically.\"\"\"\n",
    "    kappa = 2 * np.arcsin(k)\n",
    "    func = lambda x: np.sin(x) ** (2 * v)\n",
    "    res, err = quad(func, -0.5 * kappa, 0.5 * kappa, epsabs=epsabs, epsrel=epsrel)\n",
    "    return res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's also define our analytical expression:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def IAnalytic(v, k, nterms=30):\n",
    "    \"\"\"Return the integral I, evaluated analytically.\"\"\"\n",
    "    return np.pi * fac2(2 * v - 1) / (2 ** v * factorial(v))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's show that the error is close to the machine limit for $k > 1$ and $v < 10$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/rodrigo/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:3: RuntimeWarning: invalid value encountered in arcsin\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "/Users/rodrigo/anaconda3/lib/python3.6/site-packages/scipy/integrate/quadpack.py:385: IntegrationWarning: The occurrence of roundoff error is detected, which prevents \n",
      "  the requested tolerance from being achieved.  The error may be \n",
      "  underestimated.\n",
      "  warnings.warn(msg, IntegrationWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The maximum relative error on I is 2.2204e-16.\n",
      "The maximum fractional error on I is 3.1331e-16.\n"
     ]
    }
   ],
   "source": [
    "maxrel = 0\n",
    "maxfrac = 0\n",
    "for k in np.logspace(0, 5, 100):\n",
    "    for v in range(10):\n",
    "        I1 = I(v, k)\n",
    "        I2 = IAnalytic(v, k)\n",
    "        rel = np.abs(I1 - I2)\n",
    "        frac = np.abs(rel / I1)\n",
    "        if rel > maxrel:\n",
    "            maxrel = rel\n",
    "        if frac > maxfrac:\n",
    "            maxfrac = frac\n",
    "print(\"The maximum relative error on I is %.4e.\" % maxrel)\n",
    "print(\"The maximum fractional error on I is %.4e.\" % maxfrac)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "â– "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
