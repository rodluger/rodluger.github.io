{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vieta's formulae\n",
    "\n",
    "#### Validation of the expansion of the integrands in $\\mathcal{P}$ using [Vieta's formulae](https://en.wikipedia.org/wiki/Vieta%27s_formulas)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's simply show that the two expressions are equivalent by computing $\\mathcal{P}$ using each one for all terms up to, say, $l_\\mathrm{max} = 6$. First, we define the two integrals, which we will evaluate numerically:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Using sympy version 1.1.2.dev\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from IPython.display import display, Math\n",
    "import sympy\n",
    "\n",
    "# Initialize the session\n",
    "sympy.init_session(quiet=True)\n",
    "\n",
    "# I am using the dev version of sympy\n",
    "print(\"Using sympy version\", sympy.__version__)\n",
    "\n",
    "# Define our symbols\n",
    "delta, s = sympy.symbols('delta s')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's define the Vieta cofficient $A_{i,u,v}$ as it appears in the text:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def A(i, u, v):\n",
    "    \"\"\"Compute the Vieta coefficient A_{i, u, v}.\"\"\"\n",
    "    j1 = max(0, u - i)\n",
    "    j2 = min(u + v - i, u)\n",
    "    return sum([sympy.binomial(u, j) * \n",
    "                sympy.binomial(v, u + v - i - j) * \n",
    "                (-1) ** (u + j) * delta ** (u + v - i - j) \n",
    "                for j in range(j1, j2 + 1)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We wish to show that this expression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def LHS(u, v):\n",
    "    return (1 - s ** 2) ** u * (delta + s ** 2) ** v"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "is equivalent to this expression:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def RHS(u, v):\n",
    "    return sum([A(i, u, v) * s ** (2 * i) for i in range(0, u + v + 1)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can verify that they are in fact equivalent for all $s$ and $\\delta$ for integer $u$ and $v$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "for u in range(10):\n",
    "    for v in range(10):\n",
    "        assert factor(LHS(u, v)) == factor(RHS(u, v)), \"Mismatch in expression values!\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "â– "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
