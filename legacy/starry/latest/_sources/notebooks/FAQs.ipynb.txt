{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FAQs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A non-exhaustive list of frequently asked questions about `starry`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. I get weird output when I call `starry` functions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you call a `starry.Map` method (or any other `starry` function) and get something like\n",
    "\n",
    "```python\n",
    "Elemwise{mul,no_inplace}.0\n",
    "```\n",
    "\n",
    "or\n",
    "\n",
    "```python\n",
    "TensorConstant{(1,) of 1.0}\n",
    "```\n",
    "\n",
    "or\n",
    "\n",
    "```python\n",
    "Subtensor{int64}.0\n",
    "```\n",
    "\n",
    "that's because you're running `starry` in [lazy mode](LazyGreedy.ipynb#Lazy-mode). To obtain the numerical value of a variable or expression in lazy mode, simply call its ``.eval()`` method. Or, alternatively, switch to [greedy mode](LazyGreedy.ipynb#Greedy-mode) by adding\n",
    "\n",
    "```python\n",
    "starry.config.lazy = False\n",
    "```\n",
    "\n",
    "at the very **top** of your script, before instantiating any ``starry`` objects. All methods will automagically return numerical values in greedy mode."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. I get a `ValueError` when instantiating a `pymc3` model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you get an error like\n",
    "\n",
    "```python\n",
    "ValueError: setting an array element with a sequence.\n",
    "```\n",
    "\n",
    "inside of a `pymc3` model, it could be that you're in [greedy mode](LazyGreedy.ipynb#Greedy-mode). If you have the line\n",
    "\n",
    "```python\n",
    "starry.config.lazy = False\n",
    "```\n",
    "\n",
    "at the top of your script, simply remove it. To sample using `pymc3`, `starry` needs to be in [lazy mode](LazyGreedy.ipynb#Lazy-mode)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. How do I evaluate a variable inside a `pymc3` model?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you're in a `pymc3` model context, running the `.eval()` method of a `pymc3` variable usually results in an error similar to the following:\n",
    "\n",
    "```python\n",
    "MissingInputError: Input 0 of the graph (indices start from 0), used to compute [something], was not provided and not given a value. Use the Theano flag exception_verbosity='high', for more information on this error.\n",
    "```\n",
    "\n",
    "That's because in a `pymc3` model context, none of the `theano` variables ever have values (\"inputs\"), so you get an error when you try to evaluate them the usual way. `pymc3` stores things differently (using test values), so what you want to do instead is\n",
    "\n",
    "```python\n",
    "exoplanet.eval_in_model(expression)\n",
    "```\n",
    "\n",
    "where `expression` is the `pymc3` expression whose value you want. By default, this will evaluate the expression at the **test point** of each of the inputs. If you've already run the sampler and have access to a `trace`, you can evaluate the expression at index `i` of the `trace` by running\n",
    "\n",
    "```python\n",
    "exoplanet.eval_in_model(expression, point=trace.point(i))\n",
    "```\n",
    "\n",
    "Check out the [exoplanet docs](https://exoplanet.dfm.io/en/stable/user/api/#exoplanet.eval_in_model) for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. The new verison of `starry` seems much slower than the previous version."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you're using `starry` in `greedy` mode, you may have noticed a performance hit when doing certain operations. Since there's a lot of trickery in the backend to get `starry` to work with `pymc3` and `exoplanet`, there's quite a bit of overhead in the new version. There are several ways around this, and here are some things to consider:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Don't instantiate `starry` models repeatedly.\n",
    "\n",
    "Initializing a `starry.Map` or `starry.System` instance is computationally expensive. This is because `starry` pre-computes as many things as possible when these classes are instantiated, with the goal of making flux evaluations efficient. Instantiate a `starry.Map` object only a single time in your script!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Use `pymc3`, not `emcee`, to do inference.\n",
    "\n",
    "The new version of `starry` was specifically designed for efficient gradient-based inference with `pymc3`. Consider switching from `emcee` to `pymc3` to do inference: `starry` handles all the gradient evaluations internally, so it's fairly easy to get a model up and running. See the other tutorials for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### If you use `emcee`, manually compile your `starry` functions.\n",
    "\n",
    "The `greedy` version of `starry` compiles things automagically for you, but you can get much better performance if you compile things yourself (it's not hard!). Consider the following example, for instance. We create the function `slow_flux` that accepts some spherical harmonic coefficients `coeffs` and a vector of rotational phases `theta` and returns the flux seen by the observer. Note that we're re-instantiating the map every time we call this function (which, as we mentioned above, is a bad idea!)\n",
    "\n",
    "```python\n",
    "import starry\n",
    "import numpy as np\n",
    "import time\n",
    "\n",
    "# Greedy mode\n",
    "starry.config.lazy = False\n",
    "starry.config.quiet = True\n",
    "\n",
    "# Instantiate the map, set the coeffs, compute the flux\n",
    "def slow_flux(coeffs, theta):\n",
    "    map = starry.Map(10)\n",
    "    map[1:, :] = coeffs\n",
    "    return map.flux(theta=theta)\n",
    "\n",
    "# Function args\n",
    "coeffs = np.random.randn(120)\n",
    "theta = np.linspace(0, 360, 1000)\n",
    "\n",
    "# Time the function\n",
    "nruns = 25\n",
    "tstart = time.time()\n",
    "for k in range(nruns):\n",
    "    slow_flux(coeffs, theta)\n",
    "elapsed = (time.time() - tstart) / nruns\n",
    "print(\"Call took {:.3f} seconds.\".format(elapsed))\n",
    "```\n",
    "\n",
    "If we run this snippet, we find that a single call to the `slow_flux` function takes about a tenth of a second:\n",
    "\n",
    "```\n",
    ">>> Call took 0.128 seconds.\n",
    "```\n",
    "\n",
    "If we're evaluating this function repeatedly (say) in an MCMC sampler, things are going to take a long time to run.\n",
    "\n",
    "A **much better** approach is to run `starry` in `lazy` mode and use `theano` to compile this function for us. You can read more about `theano` functions [here](http://deeplearning.net/software/theano/library/compile/function.html) and [here](http://deeplearning.net/software/theano/tutorial/index.html).\n",
    "\n",
    "```python\n",
    "import starry\n",
    "import numpy as np\n",
    "import theano\n",
    "import theano.tensor as tt\n",
    "import time\n",
    "\n",
    "# Lazy mode\n",
    "starry.config.lazy = True\n",
    "starry.config.quiet = True\n",
    "\n",
    "# Instantiate the map, set the coeffs, compute the flux\n",
    "def slow_flux(coeffs, theta):\n",
    "    map = starry.Map(10)\n",
    "    map[1:, :] = coeffs\n",
    "    return map.flux(theta=theta)\n",
    "\n",
    "# Compile `slow_flux` into a theano function\n",
    "arg1 = tt.dvector()\n",
    "arg2 = tt.dvector()\n",
    "fast_flux = theano.function([arg1, arg2], slow_flux(arg1, arg2))\n",
    "\n",
    "# Function args\n",
    "coeffs = np.random.randn(120)\n",
    "theta = np.linspace(0, 360, 1000)\n",
    "\n",
    "# Time the function\n",
    "nruns = 25\n",
    "tstart = time.time()\n",
    "for k in range(nruns):\n",
    "    fast_flux(coeffs, theta)\n",
    "elapsed = (time.time() - tstart) / nruns\n",
    "print(\"Call took {:.3f} seconds.\".format(elapsed))\n",
    "```\n",
    "\n",
    "Running this snippet prints the following:\n",
    "\n",
    "```\n",
    ">>> Call took 0.002 seconds.\n",
    "```\n",
    "\n",
    "Compiling our function gave us a speed boost of about 3 orders of magnitude!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. I can't find what I'm looking for."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Please search [all of the issues on GitHub](https://github.com/rodluger/starry/issues?utf8=%E2%9C%93&q=), or [open a new one](https://github.com/rodluger/starry/issues/new)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
